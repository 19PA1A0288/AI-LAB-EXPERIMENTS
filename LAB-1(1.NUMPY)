{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNNABlZhHPH3FCOtjKnxEWD",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/19PA1A0288/AI-LAB-EXPERIMENTS/blob/master/LAB-1(1.NUMPY)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8aK4DXrWvR23",
        "colab_type": "text"
      },
      "source": [
        "[19PA1A0288]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-dapuNDkq_p3",
        "colab_type": "text"
      },
      "source": [
        " \n",
        "LAB EXPERIMENT NO: 1. Numpy                                                                \n",
        "  \n",
        " 1)Different ways to create a Numpy arrays"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bHUyxvh5sBdr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "a53a4640-314e-49e6-f41e-846f2e3a2726"
      },
      "source": [
        " import numpy as np \n",
        "p=np.array([1,2,3])\n",
        "print(p)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1 2 3]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1QzlYG9ArRm_",
        "colab_type": "text"
      },
      "source": [
        "2) ADD,REMOVE, MODIFY array elements               \n",
        "        \n",
        "Add"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zgm44ehzgLRu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "e35c08f6-3921-4b81-9f0f-219a7fecd45b"
      },
      "source": [
        " f=np.array([4,8,9])\n",
        "q=np.append(f,[6,5,8])\n",
        "print(q)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[4 8 9 6 5 8]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tn5clY34rqrX",
        "colab_type": "text"
      },
      "source": [
        "Remove"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "y5YJMSLXgOY5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "3af10e93-5b1e-4655-bd5f-61ee337e02bf"
      },
      "source": [
        " c=np.delete(f,2)\n",
        "print(c)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[4 8]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BFX__L2gryjm",
        "colab_type": "text"
      },
      "source": [
        " Modify"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ui134f2zgmFy",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "ebc878ee-953b-49e8-f765-0ad752c00bcc"
      },
      "source": [
        " c[c>5]=-1\n",
        "print(c)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[ 4 -1]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nVkaOqw0sF9R",
        "colab_type": "text"
      },
      "source": [
        "3) Arthematic operations on Numpy array"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BnWTWvkqgyBS",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 640
        },
        "outputId": "722d11ec-af72-4664-8f83-5a8f91166c1c"
      },
      "source": [
        " import numpy as np \n",
        "l=np.random.random((5,5))\n",
        "m=np.random.random((5,5))\n",
        "num_sum=np.add(l,m)\n",
        "num_diff=np.subtract(l,m)\n",
        "num_prod=np.multiply(l,m)\n",
        "num_quo=np.divide(l,m)\n",
        "num_mod=np.mod(l,m)\n",
        "num_pow=np.power(l,m)\n",
        "print(num_sum)\n",
        "print(num_diff)\n",
        "print(num_prod)\n",
        "print(num_quo)\n",
        "print(num_mod)\n",
        "print(num_pow)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1.2872692  0.45603081 1.29785108 0.58049295 0.49603108]\n",
            " [1.11790809 1.45476883 1.63397786 0.72691296 0.4998504 ]\n",
            " [0.59981484 0.34913545 0.44470716 0.89863753 0.24512125]\n",
            " [0.41449876 0.63061062 0.51383486 0.24116034 1.50571012]\n",
            " [0.42336458 1.25093696 0.15081374 0.78041066 1.4297966 ]]\n",
            "[[-0.47285512 -0.01852665 -0.13560444  0.54534717  0.32396199]\n",
            " [-0.24774302  0.0525378  -0.15939314  0.13096552  0.46348404]\n",
            " [-0.13889406 -0.09164647 -0.38224731  0.3874415   0.17349899]\n",
            " [ 0.22383231  0.60548168 -0.29474716  0.12446103 -0.0558639 ]\n",
            " [-0.04652266 -0.53931634 -0.08700836 -0.44089057  0.41941615]]\n",
            "[[0.35836751 0.05190521 0.41650722 0.00989213 0.03527387]\n",
            " [0.29708548 0.52839803 0.66111937 0.12781262 0.00875824]\n",
            " [0.08512157 0.02837412 0.01291286 0.16435962 0.00749563]\n",
            " [0.03042708 0.00776542 0.04428759 0.01066694 0.56601054]\n",
            " [0.0442683  0.31849529 0.00379358 0.10366408 0.4671021 ]]\n",
            "[[ 0.46270259  0.92192032  0.81080064 32.03343602  4.76548727]\n",
            " [ 0.63717963  1.07493458  0.82224186  1.43952036 26.48970906]\n",
            " [ 0.62395455  0.58416412  0.07552997  2.5158236   5.84483395]\n",
            " [ 3.34789414 49.18998699  0.27095297  3.1330208   0.92845181]\n",
            " [ 0.80198373  0.39749717  0.26829036  0.27799864  1.83021431]]\n",
            "[[4.07207042e-01 2.18752078e-01 5.81123322e-01 5.87567600e-04\n",
            "  6.58583501e-02]\n",
            " [4.35082536e-01 5.25377959e-02 7.37292356e-01 1.30965516e-01\n",
            "  8.90446936e-03]\n",
            " [2.30460389e-01 1.28744491e-01 3.12299241e-02 1.31843487e-01\n",
            "  3.02544602e-02]\n",
            " [3.31658689e-02 2.38708598e-03 1.09543850e-01 7.76171801e-03\n",
            "  7.24923107e-01]\n",
            " [1.88420962e-01 3.55810314e-01 3.19026891e-02 1.69760044e-01\n",
            "  4.19416151e-01]]\n",
            "[[0.45353749 0.69724386 0.67771103 0.98995312 0.92615936]\n",
            " [0.56650988 0.82013078 0.76087702 0.77707619 0.98680498]\n",
            " [0.58152997 0.63649097 0.23852799 0.89327654 0.94553308]\n",
            " [0.89684264 0.99397232 0.40899129 0.9056034  0.77788924]\n",
            " [0.67561025 0.39653703 0.66387839 0.33860905 0.96117341]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wW7eA9iSsWZy",
        "colab_type": "text"
      },
      "source": [
        " 4)slicing and iterating of numpy array"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eBqe1PWys3Bj",
        "colab_type": "text"
      },
      "source": [
        "Slicing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2P4S0pJ9g2Jg",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "c09d32d3-cce9-4b7e-8d49-47547e36ae64"
      },
      "source": [
        " import numpy as np \n",
        "arr=np.array([1,2,3,4,5,6,7])\n",
        "print(arr[1:5])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[2 3 4 5]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eYxhrbbUsw_Y",
        "colab_type": "text"
      },
      "source": [
        " iterating"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fzJ52RqNhAfj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 137
        },
        "outputId": "9359a6b8-5501-4ebb-9da3-aa3c073e39c2"
      },
      "source": [
        " for x in arr:\n",
        "  print(x)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tt9RIpC3hZaH",
        "colab_type": "text"
      },
      "source": [
        " 5) matrix operations on numpy arrays"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a_Q1xD1xhKfU",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 120
        },
        "outputId": "65ae6d94-b13c-463a-e5d1-114941dc4e3a"
      },
      "source": [
        " import numpy as np \n",
        "s=np.array([[1,2],[3,4]])\n",
        "t=np.array([[5,6],[7,8]])\n",
        "print(np.add(s,t))\n",
        "print(np.subtract(s,t))\n",
        "print(np.divide(s,t))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 6  8]\n",
            " [10 12]]\n",
            "[[-4 -4]\n",
            " [-4 -4]]\n",
            "[[0.2        0.33333333]\n",
            " [0.42857143 0.5       ]]\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}